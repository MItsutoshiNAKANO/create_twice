/// @file
/// @brief Why returns 42P07 when creating a table twice with 'IF NOT EXISTS'?
/// @copyright
///   (C) 2025 Mitsutoshi Nakano <ItSANgo@gmail.com>
///   SPDX-License-Identifier: MIT

#include <err.h>
#include <getopt.h>
#include <stdio.h>
#include <stdlib.h>
#include <sysexits.h>

#include "sql_error.h"

#define VERSION "0.1.0"

/// @brief The connection parameters.
struct connection {
    /// @brief The connection.
    const char *connection;
    /// @brief The user.
    const char *user;
    /// @brief The password.
    const char *password;
};

/// @brief Connect to the database.
/// @param connection The connection parameters.
static void
connect_db(struct connection *connection)
{
    EXEC SQL BEGIN DECLARE SECTION;
    const char *conn = connection->connection;
    const char *user = connection->user;
    const char *password = connection->password;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR CALL sql_error(
        __FILE__, __LINE__, __func__, EX_IOERR, "Connect Error"
    );

    // clang-format off
    EXEC SQL CONNECT TO :conn USER :user USING :password;
    // clang-format on

    EXEC SQL WHENEVER SQLERROR CONTINUE;
}

/// @brief Create a temporary table.
static long
create_temporary(void)
{
    EXEC SQL CREATE TEMPORARY TABLE IF NOT EXISTS temporary(dummy INTEGER);
    SQL_WARN("Create Temporary Table");
    return sqlca.sqlcode;
}

/// @brief Print the usage.
/// @param exit_code The exit code.
/// @param program The program name.
[[noreturn]] static void
usage(int exit_code, const char *program)
{
    fprintf(
        exit_code ? stderr : stdout,
        "Usage: %s [OPTION...]\n\n"
        "Options:\n"
        "-c, --connect STRING    connect to the STRING database\n"
        "-u, -user USER          connect as the USER\n"
        "-p, --password PASSWORD connect with the PASSWORD\n"
        "-r, --repeat NUMBER     repeat NUMBER times\n"
        "-h, --help              print this help\n"
        "-V, --version           print the version\n",
        program
    );
    exit(exit_code);
}

/// @brief The main function.
/// @param argc The number of arguments.
/// @param argv The arguments.
/// @return The exit status.
[[noreturn]] int
main(int argc, char *argv[])
{
    static const struct option long_options[] = {
        {"help", no_argument, 0, 'h'},
        {"version", no_argument, 0, 'V'},
        {"connect", required_argument, 0, 'c'},
        {"user", required_argument, 0, 'u'},
        {"password", required_argument, 0, 'p'},
        {"repeat", required_argument, 0, 'r'},
        {0, 0, 0, 0}
    };
    struct connection conn = {"tcp:postgresql://127.0.0.1", "sample", "sample"};
    long long repeats = 2;
    char *endptr = NULL;
    for (int c, option_index = -1;
         (c = getopt_long(argc, argv, "r:c:u:p:hV", long_options, &option_index)
         ) != -1;) {
        switch (c) {
        case 'h':
            usage(EX_OK, argv[0]);
        case 'V':
            printf("%s\n", VERSION);
            exit(EX_OK);
        case 'c':
            conn.connection = optarg;
            break;
        case 'u':
            conn.user = optarg;
            break;
        case 'p':
            conn.password = optarg;
            break;
        case 'r':
            repeats = strtoll(optarg, &endptr, 0);
            break;
        default:
            warnx("Unknown option: %c", c);
            usage(EX_USAGE, argv[0]);
        }
    }
    if (argc - optind < 0) {
        warnx("Invalid number of arguments");
        usage(EX_USAGE, argv[0]);
    }

    connect_db(&conn);
    for (long long i = 0; i < repeats; i++) {
        create_temporary();
    }

    exit(EX_OK);
}
